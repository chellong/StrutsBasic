/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.29
 * Generated at: 2016-01-23 15:52:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String path = request.getContextPath();
	String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort()
			+ path + "/";

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n");
      out.write("\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n");
      out.write("<head>\r\n");
      out.write("<base href=\"");
      out.print(basePath);
      out.write("\" />\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=GB18030\" />\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<a href=\"path/path.action\">路径问题说明</a>\r\n");
      out.write("\t<hr style=\"border: 1 dashed #987cb9\" />\r\n");
      out.write("\tAction执行的时候并不一定要执行execute方法\r\n");
      out.write("\t<br /> 可以在配置文件中配置Action的时候用method=来指定执行哪个方法\r\n");
      out.write("\t也可以在Url地址中动态指定（动态方法调用DMI）（推荐）\r\n");
      out.write("\t<br />\r\n");
      out.write("\t<a href=\"/user/userAdd\">添加用户</a>\r\n");
      out.write("\t<br />\r\n");
      out.write("\t<a href=\"/user/user!add\">添加用户</a>\r\n");
      out.write("\t<br /> 前者会产生太多的action，所以不推荐使用\r\n");
      out.write("\r\n");
      out.write("\t<hr style=\"border: 1 dashed #987cb9\" />\r\n");
      out.write("\r\n");
      out.write("\t使用通配符，将配置量降到最低\r\n");
      out.write("\t<br />\r\n");
      out.write("\t<a href=\"/actions/Studentadd\">添加学生</a>\r\n");
      out.write("\t<a href=\"/actions/Studentdelete\">删除学生</a>\r\n");
      out.write("\t<br /> 不过，一定要遵守\"约定优于配置\"的原则\r\n");
      out.write("\t<br />\r\n");
      out.write("\t<a href=\"/actions/Teacher_add\">添加老师</a>\r\n");
      out.write("\t<a href=\"/actions/Teacher_delete\">删除老师</a>\r\n");
      out.write("\t<a href=\"/actions/Course_add\">添加课程</a>\r\n");
      out.write("\t<a href=\"/actions/Course_delete\">删除课程</a>\r\n");
      out.write("\r\n");
      out.write("\t<hr style=\"border: 1 dashed #987cb9\" />\r\n");
      out.write("\t使用action属性接收参数\r\n");
      out.write("\t<a href=\"user/user_007?name=a&age=8\">添加用户</a>\r\n");
      out.write("\r\n");
      out.write("\t<hr style=\"border: 1 dashed #987cb9\" />\r\n");
      out.write("\t<a href=\"user/user_008?user.name=a&user.age=8\">使用Domain\r\n");
      out.write("\t\tModel接收参数,添加用户</a>\r\n");
      out.write("\r\n");
      out.write("\t<!--中文问题 -->\r\n");
      out.write("\t<hr style=\"border: 1 dashed #987cb9\" />\r\n");
      out.write("\t使用action属性接收参数，测试中文问题\r\n");
      out.write("\t<form action=\"user/user_008\" method=\"post\">\r\n");
      out.write("\t\t姓名：<input type=\"text\" name=\"name\"></input> <input type=\"submit\"\r\n");
      out.write("\t\t\tvalue=\"submit\" />\r\n");
      out.write("\t</form>\r\n");
      out.write("\t<!--数据验证 -->\r\n");
      out.write("\t<hr style=\"border: 1 dashed #987cb9\" />\r\n");
      out.write("\t使用addFieldError方法和s:fieldError标签简单处理数据校验\r\n");
      out.write("\t<a href=\"user/user_009?name=a\">添加错误的用户</a>\r\n");
      out.write("\t<a href=\"user/user_009?name=admin\">添加真确的用户</a>\r\n");
      out.write("\r\n");
      out.write("\t<hr style=\"border: 1 dashed #987cb9\" />\r\n");
      out.write("\t取得Map类型request,session,application,真实类型 HttpServletRequest,\r\n");
      out.write("\tHttpSession, ServletContext的引用:\r\n");
      out.write("\t<ol>\r\n");
      out.write("\t\t<li>前三者：依赖于容器</li>\r\n");
      out.write("\t\t<!--(只用这种) -->\r\n");
      out.write("\t\t<li>前三者：IOC</li>\r\n");
      out.write("\t\t<li>后三者：依赖于容器</li>\r\n");
      out.write("\t\t<li>后三者：IOC</li>\r\n");
      out.write("\t</ol>\r\n");
      out.write("\t<br />\r\n");
      out.write("\t<form name=\"f\" action=\"\" method=\"post\">\r\n");
      out.write("\t\t用户名：<input type=\"text\" name=\"name\" /> 密码：<input type=\"text\"\r\n");
      out.write("\t\t\tname=\"password\" /> <br /> \r\n");
      out.write("\t\t<br/>\r\n");
      out.write("\t\t<br/>\r\n");
      out.write("\t\t<input type=\"button\" value=\"submit1\"\r\n");
      out.write("\t\t\tonclick=\"javascript:document.f.action='login/login1';document.f.submit();\" />\r\n");
      out.write("\t\t<input type=\"button\" value=\"submit2\"\r\n");
      out.write("\t\t\tonclick=\"javascript:document.f.action='login/login2';document.f.submit();\" />\r\n");
      out.write("\t\t<input type=\"button\" value=\"submit3\"\r\n");
      out.write("\t\t\tonclick=\"javascript:document.f.action='login/login3';document.f.submit();\" />\r\n");
      out.write("\t\t<input type=\"button\" value=\"submit4\"\r\n");
      out.write("\t\t\tonclick=\"javascript:document.f.action='login/login4';document.f.submit();\" />\r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("\t<hr style=\"border: 1 dashed #987cb9\" />\r\n");
      out.write("\tResult类型\r\n");
      out.write("\t<ol>\r\n");
      out.write("\t<li><a href=\"r/r1\">dispatcher</a></li>\r\n");
      out.write("\t<li><a href=\"r/r2\">redirect</a></li>\r\n");
      out.write("\t<li><a href=\"r/r3\">chain</a></li>\r\n");
      out.write("\t<li><a href=\"r/r4\">redirectAction</a></li>\r\n");
      out.write("\t<li>freemarker</li>\r\n");
      out.write("\t<li>httpheader</li>\r\n");
      out.write("\t<li>stream</li>\r\n");
      out.write("\t<li>velocity</li>\r\n");
      out.write("\t<li>xslt</li>\r\n");
      out.write("\t<li>plaintext</li>\r\n");
      out.write("\t<li>tiles</li>\r\n");
      out.write("\t</ol>\r\n");
      out.write("\t\r\n");
      out.write("\t<hr style=\"border: 1 dashed #987cb9\" />\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
